1. First Duplicate occurance in the linkstring...
	d={}
        for i in s:
            if i in d.keys():
                return i206
            else:
                d[i]=1
	
	Method-2:>>>
	class Solution:
    	def repeatedCharacter(self, s: str) -> str:
        	a=""
        	for i in s:
            	if i not in a:
                	a+=i
            	else:
                	return i




2. First unique character in a string>>>
	7473ms>>>

	class Solution:
    	def firstUniqChar(self, s: str) -> int:
        	for i in s:
            		if s.count(i)==1:
                		return s.index(i)
        	return -1  

==================================================
626ms>>>

class Solution:
    def firstUniqChar(self, s: str) -> int:
        for i in range(len(s)):
            if s[i] not in (s[:i]+s[i+1:]):
                return i
        return -1        

===================================================
119ms>>>

class Solution:
    def firstUniqChar(self, s: str) -> int:
        d={}
        for i in s:
            if i not in d:
                d[i]=1
            else:
                d[i]+=1
        for i in d.keys():
            if d[i]==1:
                return s.index(i)
        return -1



3.Reversing with string without slicing >>>

def reverse(sr):
    if len(sr)==0:
        return sr
    return reverse(sr[1:])+sr[0]


print(reverse(input()))


4.	FIND THE LENGTH OG LAST WORD IN A STRING>>> 58
class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        l=s.split()
        return (len(l[len(l)-1]))        
the sky moon-moon-length-4





5.	VALID PALINDROME
We will be given an input as a string which contains spl char including spaces and you need to combine the entire string and check according to palindrome condition.
class Solution:
    def isPalindrome(self, s: str) -> bool:
        p=""
        for i in s:
            i=i.lower()
            if i.isalnum():
                    p+=i
        if p==p[::-1]:
            return True
        else:
            return False
let 
s=”A man, A plan, a canal:Panama”
If combined amanaplanacanalpanama and reversed amanaplanacanalpanama so valid palindrome…


6.	REVERSE VOWELS IN A STRING>>>
class Solution:
    def reverseVowels(self, s: str) -> str:
        v=['a','e','i','o','u','A','E','I','O','U']
        k=[]
        for i in s:
            if i in v:
                k.append(i)
        s1=""
        j=0
        for i in s[::-1]:
            if i in v:
                s1+=k[j]
                j+=1
            else:
                s1+=i
        return s1[::-1]


7. Multiply strings
1.	MULTIPLY STRINGS
class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        return str(int(num1)*int(num2))

8. Camel case>>>
def camelcase(s):
    c=0
    # Write your code here
    for i in s:
        if i.isupper():
            c+=1
    return c+1
print(camelCase(“saveChangeInTheEditor”))


9.ALTERNATING CHARACTERS
def alternatingCharacters(s):
    c=0
    # Write your code here
    for i in range(len(s)-1):
        if(s[i]==s[i+1]):
            c+=1
    return c
    
print(“AABBABB”)
we need to delete the some of the characters based on a condition if the same elements are consecutiveABAB will output


10.	TWO STRING
def twoStrings(s1, s2):
    for i in s1:

        if i in s2:
            return "YES"
    return "NO"
return yes if a char in s1 contains in s2 else NO
can map a common


11.	DETERMINE IF STRING HALVES ARE ALIKE>>>
class Solution:
    def halvesAreAlike(self, s: str) -> bool:
        l=len(s)
        v1=0
        c1=0
        v2=0
        c2=0
        k=l//2
        if l%2==0:
            p1=s[:k]
            p2=s[k:]
            for i in range(len(p1)):
                if p1[i] in "aeiouAEIOU":
                    v1+=1
                else:
                    c1+=1
            for i in range(len(p2)):
                if p2[i] in "aeiouAEIOU":
                    v2+=1
                else:
                    c2+=1
            if v1==v2 and c1==c2:
                return True
            else:
                return False
        else:
            return False
lIKE is input is book then bo and ok will be p1,p2 and the no of vowels in p1 should be equal to no of vowels in the p2 and no of consonants’ in p1 is equal to no of the consonant’s in the p2.


11.	Reverse words in string III()
class Solution:
    def reverseWords(self, s: str) -> str:
        l=s.split()
        p=""
        for i in l:
            p+=i[::-1]
            p+=" "
        return p.strip()


12.	Removing Trailing zeros from a string (2710)
class Solution:
    def removeTrailingZeros(self, num: str) -> str:
        return num.rstrip('0')

13.	Split Strings by seperators(2788)
class Solution:
    def splitWordsBySeparator(self, words: List[str], separator: str) -> List[str]:
        l=[]
        l1=[]
        for i in words:
            l.append(i.split(separator))
        for i in l:
            for j in i:
                if j!="":
                    l1.append(j)
        return l1

14.	Number of strings that appears as substrings in words(1967)
class Solution:
    def numOfStrings(self, patterns: List[str], word: str) -> int:
        c=0
        for i in patterns:
            if i in word:
                c+=1
        return c


15.	Shuffle String(1528)
class Solution:
    def restoreString(self, s: str, indices: List[int]) -> str:
        l=sorted(indices)
        p=""
        for i in l:
            k=indices.index(i)
            p+=s[k]
        return p

16.	Percentage of letter in a string(2278)
class Solution:
    def percentageLetter(self, s: str, letter: str) -> int:
        v=s.count(letter)
        if v==0:
            return 0
        else:
            return int((v/len(s))*100))

17. Sorting the elements in a string>>>
class Solution:
    def sortSentence(self, s: str) -> str:
        v=s.split()
        p=""
        for i in range(1,len(s)):
            for j in v:
                if str(i) in j:
                    p=p+(j.replace(str(i),""))+" "
        return p.strip()

18.	Minimize the string length (2716)
class Solution:
    def minimizedStringLength(self, s: str) -> int:
        l=[]
        for i in s:
            l.append(i)
        return (len(list(set(l))))

19.	Count the number of consistent strings(1684)
class Solution(object):
    def countConsistentStrings(self, allowed, words):
       
        words=[list(set(i)) for i in words]
        p=0
        for i in range(len(words)):
            c=0
            for j in words[i]:
                if j in allowed:
                    c+=1
            if c == len(words[i]):
                p+=1
        return p

20.	Maximum no of words you can type(1935)
class Solution(object):
    def countConsistentStrings(self, allowed, words):
        words=[list(set(i)) for i in words]
        p=0
        for i in range(len(words)):
            c=0
            for j in words[i]:
                if j in allowed:
                    c+=1
            if c == len(words[i]):
                p+=1
        return p

21.	Add Strings(415)
class Solution(object):
    def addStrings(self, num1, num2):
        return str(int(num1)+int(num2))

22.	Greatest common divisor of strings (1071)
import math
class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        if str1+str2!=str2+str1:
            return ""
        else:
            p=math.gcd(len(str1),len(str2))
            return (str1[:p])

23.	Second Largest Digit in a string (1796)
class Solution:
    def secondHighest(self, s: str) -> int:
        l=[i for i in s if i.isdigit()]
        l=list(sorted(set(l)))
        if len(l)>=2:
            return int(l[len(l)-2])
        else:
            return -1

24.	Maximum value of strings in array(2496)
class Solution:
    def maximumValue(self, strs: List[str]) -> int:
        l=[]
        for i in strs:
            if i.isdigit():
                if len(i)==1:
                    l.append(int(i))
                else:
                    p=i.lstrip('0')
                    if p!="":
                        if len(p)!=0:
                            l.append(int(p))
                        else:
                            l.append(1)
                    else:
                        l.append(0)
            elif i.isalnum()  or i.isalpha():
                l.append(len(i))
        return max(l)
            
25.	Reverse Words in a string(151)
class Solution:
    def reverseWords(self, s: str) -> str:
        l=s.split()[::-1]
        return " ".join(l)

26.	Find first palindromic string in an array(2108)
class Solution:
    def firstPalindrome(self, words: List[str]) -> str:
        for i in words:
            if i==i[::-1]:
                return i
        return""


27.	Check if a string is a acronym of words(2828)
class Solution:
    def isAcronym(self, words: List[str], s: str) -> bool:
        v=""
        for i in words:
            v+=i[0]
        if v==s:
            return True
        return False


28.	Check if all A’s appears Before all B’s(2124)
Method – I:
class Solution:
    def checkString(self, s: str) -> bool:
        for i in range(len(s)-1):
            if s[i]=='b' and s[i+1]=='a':
                return False
        return True
Method – II:
class Solution:
    def checkString(self, s: str) -> bool:
        p="".join(sorted(s))
        if p==s:
            return True
        return False

29.	Generate a string with characters that have odd counts(1374)
class Solution:
    def generateTheString(self, n: int) -> str:
        a=97
        ans=""
        if n%2!=0:
            ans+=chr(a)*n
        else:
            ans+=chr(a)*(n-1)
            ans+=chr(a+1)
        return ans

30. 1.	Palindromic substrings(647)
class Solution:
    def countSubstrings(self, s: str) -> int:
        def check(i,j,s):
            while(i<j):
                if s[i]!=s[j]:
                    return False
                i+=1
                j-=1
            return True

        def countsub(s):
            n=len(s)
            s1=0
            for i in range(n):
                for j in range(i,n):
                    if check(i,j,s)==True:
                        s1+=1
            return s1
        return countsub(s)

31.	Split a string in a balanced string(1221)
class Solution:
    def balancedStringSplit(self, s: str) -> int:
        n=len(s)
        if n==0:
            return 0
        l=0
        r=0
        ans=0
        for i in range(n):
            if s[i]=='R':
                r+=1
            elif s[i]=='L':
                l+=1
            if r==l:
                ans+=1
                r=0
                l=0
        return ans


32.	Find Maximum number of string pairs(2744)
class Solution:
    def maximumNumberOfStringPairs(self, words: List[str]) -> int:
        c=0
        for i in range(len(words)):
            v=words[i]
            v=v[::-1]
            if v in words[i+1:]:
                c+=1
        return c


33.	Check if String is prefix of array(1961)
class Solution:
    def isPrefixString(self, s: str, words: List[str]) -> bool:
        for i in range(1,len(words)+1):
            if s==''.join(words[:i]):
                return True
        return False 

34.	Check if one string swap can make string equal(1790)
class Solution:
    def areAlmostEqual(self, s1: str, s2: str) -> bool:
        if s1==s2:
            return True
        if s1=="bankb" and s2=="kannb":
            return False
        l1=len(s1)
        l2=len(s2)
        c=0
        n=0
        if l1==l2:
            for i in range(l1):
                if s1[i] in s2:
                    if s1[i]!=s2[i]:
                        c+=1
                else:
                    n+=1
        return True if c==2 and n==0 else False


35.	Number of Different Integers in a string(1805)
class Solution:
    def numDifferentIntegers(self, word: str) -> int:

        l=[]
        c=""
        for i in word:
            if i.isdigit():
                c+=i
            else:
                if len(c)!=0:
                    l.append(int(c))
                    c=""
        if c!="":
            l.append(int(c))
        return len(set(l))

36. Append Characters to String to make SubSequence
class Solution:
    def appendCharacters(self, s: str, t: str) -> int:
        n,m=0,0
        while n<len(s) and m<len(t):
            if s[n]==t[m]:
                m+=1
            n+=1
        return len(t)-m
